#!/usr/bin/perl -nl
# Generate names of bit flag bits
#
# Input: vars.ah   Output: bitnames.h
#
use strict;
use warnings;

our %bitid;
BEGIN {
print "// This file is autogenerated. DO NOT EDIT.";
print "// Edit bitnames.ah or perl/bitnames.pl instead.\n";

#%bitid = map { 1 << $_ => $_ } 0..31;
#$bitid{1} = "0 but true";
#print STDERR "$_ -> $bitid{$_}" for keys %bitid;
}

our $bitswitch;
our @bits;

y/\r\n//d;

next if m#//.*defbit#;	# ignored commented out defbit instructions

my $desc;
$desc=$1 if s#//\s*(.*)##;

#if (m#//\s*BITFLAGS\s*(\w+)#) {
if (/defbitvar\s*(\w+)/) {
	#print STDERR "Start flags for $1";
	$bitswitch = $1;
	@bits = ();
	next;
}

next unless $bitswitch;

#if (m#//\s*ENDBITFLAGS#) {
if (/enddefbits/) {
	#print STDERR "Flags done for $bitswitch";
	print "const char *${bitswitch}_bitnames[] = {";
	print "\t", $_->[0] ? qq("$_->[0]") : "NULL", ', "', $_->[1] || "(reserved)", '",' for @bits;
	print "\tNULL, NULL,";
	print "};\n";
	$bitswitch = undef;
	next;
}

#my ($id,$val,$desc)=m#%define\s+(\w+)\s+(\w+)\s*//\s*(.*)#;
my ($id,$bit)=m/defbit\s*(\w+)\s*,\s*(\d+)/;

die "Invalid bit definition (line $.):\n$_" unless $id && defined($bit) && $desc;

#print STDERR "Got line $id/$val/$desc";

# handle binary,octal,hexadecimal notation
$bit = oct($bit) if $bit =~ /^0/;

s/.*?_// for $id;
#my ($prefix,$name) = split /_/, $id, 2;

#print STDERR "Is $name/$val";
#my $bit = $bitid{0+$val} or die "Invalid number `$val' (line $.)";
$bits[$bit] = [ lc $id, $desc ];
