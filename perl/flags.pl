#!/usr/bin/perl
#
# Generate and check bit definitions for action 7 var 85.
#
# Input: common.h  Output: patchflags.ah
#

use strict;
use warnings;

print <<INTRO;
// Autogenerated file.  DO NOT EDIT!
// Edit common.h or perl/flags.pl instead.

varb patchflagsfixedmap
INTRO

my @flags;

$flags[50] = "unifiedmaglev";
$flags[127] = "anyflagset";

while (<>) {
	if (m{^// BEGIN PATCHFLAGS} .. m{^// END PATCHFLAGS}) {
		next if /META:/ or /\(-\)/;
		m{^#define\s+([a-z0-9]+)\s+\d+\s+//.*\((\d+)\)} or /^#define\s+([a-z0-9]+)\s+(\d+)\s*/ or next;
		die "Switch $1 wants out-of-range bit $2.\n" if $2>126;
		die "Switches $flags[$2] and $1 both want bit $2.\n" if $flags[$2];
		$flags[$2] = $1;
	}
}

my $count;

for (0..$#flags) {
	if ($flags[$_]) {
		print "\tdb noflag\n" if $count==1;
		print "\ttimes $count db noflag\n" if $count > 1;
		$count = 0;
		printf "\tdb $flags[$_]\t%s// $_\n", length $flags[$_]>12 ? "" : "\t";
	} else { $count++; }
}
